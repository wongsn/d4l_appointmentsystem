import Head from 'next/head'
import styles from '../styles/Home.module.css'
import initializeApollo from '../lib/apollo'
import { useEffect, useState } from 'react'
import { gql, useLazyQuery, useQuery, useMutation, useSubscription } from '@apollo/client'
import { Button, Container, Grid, Item, Stack, Typography } from '@mui/material'
import MakeAppt from '../components/MakeAppt'
import ApptTable from '../components/ApptTable'
import PatientCombo from '../components/PatientCombo'
import DoctorCombo from '../components/DoctorCombo'
import DateCombo from '../components/DateCombo'
import UploadFile from '../components/UploadFile'
import { GET_PATIENTS, GET_APPTS, GET_DOCTORS } from '../lib/queryParams'

const Home = () => {
  const [ selectedDoctorName, setSelectedDoctorName ] = useState()
  const [ selectedPatientName, setSelectedPatientName ] = useState()
  const [ selectedPatientQuery, setSelectedPatientQuery ] = useState()
  const [ selectedDoctorQuery, setSelectedDoctorQuery ] = useState()
  const [ selectedDate, setSelectedDate ] = useState(new Date())

  // const [ apptData, setApptData] = useState([])
  // const [ apptLoading, setApptLoading ] = useState()
  // const [ apptError, setApptError ] = useState

  const queryOptions = {
        variables: {
          "params": {}
        }
      }

  

    const { data: patientData, loading: patientLoading, error: patientError } = useQuery(GET_PATIENTS, queryOptions)

    const { data: doctorData, loading: doctorLoading, error: doctorError } = useQuery(GET_DOCTORS, queryOptions) 


    const [ loadAppointments, { called, loading: apptLoading , error: apptError, data: apptData}] = useLazyQuery(GET_APPTS, queryOptions)
    

    useEffect(()=> {
      loadAppointments(queryOptions)
    }, [])


    const handleVarChange = () => {
      
      if (selectedDoctorQuery){
        queryOptions.variables.params.consulting_doctor = {
          "_eq": selectedDoctorQuery
        }
      }
      if (selectedPatientQuery) {
        queryOptions.variables.params.visiting_patient = {
          "_eq": selectedPatientQuery
        }
      }
      if (selectedDate) {
        console.log(selectedDate)
        queryOptions.variables.params.appt_date = {
          "_eq": selectedDate.toLocaleString().split(',')[0]
        }
      }

      console.log(queryOptions)
      loadAppointments(queryOptions)
    }


  return (
    <div className={styles.container}>
      <Head>
        <title>Hospital Appointment</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
       <Container sx={{ flexGrow: 1 }}>
          <Grid container spacing={2}>
            <Grid item xs={4}>
                <Stack
                  direction={"column"}
                >
                  <Typography
                    gutterBottom={true}
                    align="center"
                    variant="h5"
                  >
                    <strong>Appointment System</strong>
                  </Typography>
                  <DateCombo
                    date={selectedDate}
                    setDate={setSelectedDate}
                  />
                  <PatientCombo 
                    data={patientData} 
                    selected={selectedPatientName}
                    setPatient={setSelectedPatientName}
                    query={setSelectedPatientQuery}
                    />
                  <DoctorCombo 
                    data={doctorData} 
                    selected={selectedDoctorName}
                    setDoctor={setSelectedDoctorName}
                    query={setSelectedDoctorQuery}
                    />
                  <Button 
                    variant="contained"
                    onClick={handleVarChange}
                  >
                    Search
                  </Button>
                  <UploadFile />
                </Stack>
            </Grid>
            <Grid item xs={8}>
              { called && apptLoading ? "Loading" : <ApptTable data={apptData}/>}
            </Grid>
        </Grid>
       </Container>
       <MakeAppt />
      </main>        
    </div>
  )
}

export const getStaticProps = async ({ params}) => {

  const client = initializeApollo()

  await client.query({
    query: GET_DOCTORS
  })

  await client.query({
    query: GET_PATIENTS
  })


  return {
    props: {
      initialApolloState: client.cache.extract(),
    },
    revalidate: 1,
  }
}

export default Home